;;;;TEST;;;;
1 ;=> 1
2 ;=> 2
10 ;=> 10
-15 ;=> -15

;;;;TEST;;;;
1.0 ;=> 1.0
1.5 ;=> 1.5
1.3 ;=> 1.3
10.353 ;=> 10.353
.5 ;=> 0.5
3. ;=> 3.0
1. ;=> 1.0
.1 ;=> 0.1
0. ;=> 0.0
.0 ;=> 0.0

;;;;TEST;;;;
"abc def ghi" ;=> "abc def ghi"

;;;;TEST;;;;
a ;=> error
abc ;=> error

;;;;TEST;;;;
'a ;=> a
'abc ;=> abc
'(1 2 3) ;=> (1 2 3)

;;;;TEST;;;;
t ;=> t
't ;=> t
nil ;=> nil
'nil ;=> nil
() ;=> nil

;;;;TEST;;;;
'(1 '2 3) ;=> (1 (quote 2) 3)

;;;;TEST;;;;
(setq g1 0)
(setq g2 1)
g1 ;=> 0
g2 ;=> 1

;;;;TEST;;;;
(setq x1.1 1000)
(setq 1.1x 1000)
(setq 1.1x1.1 1000)
x1.1 ;=> 1000
1.1x ;=> 1000
1.1x1.1 ;=> 1000

;;;;TEST;;;;
(setq 1-1 1000)
1-1 ;=> 1000
(setq 1- 1000)
1- ;=> 1000

;;;;TEST;;;;
;;ignore;;
(setq a\ b 1000)
a\ b ;=> 1000
(setq 1\ 1 1000)
1\ 1 ;=> 1000

;;;;TEST;;;;
(+ 1(+ 2 3)) ;=> 6
(+ 1(+ 2 -3)) ;=> 0

;;;;TEST;;;;
(defun foo (x y)
  (+ x (car y)))
(foo 1'(2 3)) ;=> 3

;;;;TEST;;;;
(setq x"a")
x ;=> "a"

;;;;TEST;;;;
(setq x"a"y 1)
x ;=> "a"
y ;=> 1

;;;;TEST;;;;
(list 1"a"2) ;=> (1 "a" 2)
(list 1.1"a"2.2) ;=> (1.1 "a" 2.2)

;;;;TEST;;;;
'(1x 1000) ;=> (1x 1000)
'(y 1.1x 1000) ;=> (y 1.1x 1000)
'("y"1.1x'1000"a"1.y"b") ;=> ("y" 1.1x (quote 1000) "a" 1.y "b")
